import time


def num_paths(m, n):
    # No Memoization
    # Base Case
    # If m == 1, the robot can only move right (horizontally)
    # If n == 2, the robot can only move down (vertically)
    if m == 1 or n == 1:
        return 1
    # Recursive Case
    # Moving down reduces the number of rows by (m-1)
    # Moving right reduces the number of columns by (n-1)
    return num_paths(m - 1, n) + num_paths(m, n - 1)


def num_paths_memo(m, n, memo={}):
    # With Memoization
    # We added a memo dictionary to the function
    # Base Case
    # (Base Case remains the same)
    if m == 1 or n == 1:
        return 1
    # Check if it has already been computed, then return the result in the memo dictionary to speed it up
    if (m, n) in memo:
        return memo[(m, n)]
    # Recursive case
    # If the robot moves down, it reduces by (m-1); if the robot moves right, it reduces by (n-1)
    # Store the result in memo to avoid recalculating the same problem
    memo[(m, n)] = num_paths_memo(m - 1, n, memo) + num_paths_memo(m, n - 1, memo)
    return memo[(m, n)]


# driver code - you do not need to make any changes after this line.
# However, submit a screenshot of the output to report the execution time/elapsed time.
start_time = time.time()
print(num_paths(15, 14))
end_time = time.time()

start_time_memo = time.time()
print(num_paths_memo(15, 14))
end_time_memo = time.time()

print(f"Elapsed time (no memoization): {end_time - start_time} seconds")
print(f"Elapsed time (memoization): {end_time_memo - start_time_memo} seconds")
